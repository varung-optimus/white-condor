app.controller('TestCtrl', ['$scope', '$state', '$stateParams', '$sce', function ($scope, $state, $stateParams, $sce) {
    var vm = this;

    vm.token = $stateParams.token;
    $scope.task = '<div id="brinza-task-description"><p>This is a demo task. You can read about this task and its solutions in <a href="http://blog.codility.com/2011/03/solutions-for-task-equi.html" target="_blank">this blog post</a>.</p><p>A zero-indexed array A consisting of N integers is given. An <i>equilibrium index</i> of this array is any integer P such that 0 ≤ P &lt; N and the sum of elements of lower indices is equal to the sum of elements of higher indices, i.e. <br></p><blockquote><p>A[0] + A[1] + ... + A[P−1] = A[P+1] + ... + A[N−2] + A[N−1].<br></p></blockquote><p>Sum of zero elements is assumed to be equal to 0. This can happen if P = 0 or if P = N−1.</p><p>For example, consider the following array A consisting of N = 8 elements:</p><tt style="white-space:pre-wrap">  A[0] = -1  A[1] =  3  A[2] = -4  A[3] =  5  A[4] =  1  A[5] = -6  A[6] =  2  A[7] =  1</tt><p>P = 1 is an equilibrium index of this array, because:</p><blockquote><ul style="margin: 10px;padding: 0px;"><li>A[0] = −1 = A[2] + A[3] + A[4] + A[5] + A[6] + A[7]</li></ul></blockquote><p>P = 3 is an equilibrium index of this array, because:</p><blockquote><ul style="margin: 10px;padding: 0px;"><li>A[0] + A[1] + A[2] = −2 = A[4] + A[5] + A[6] + A[7]</li></ul></blockquote><p>P = 7 is also an equilibrium index, because:</p><blockquote><ul style="margin: 10px;padding: 0px;"><li>A[0] + A[1] + A[2] + A[3] + A[4] + A[5] + A[6] = 0</li></ul></blockquote><p>and there are no elements with indices greater than 7.</p><p>P = 8 is not an equilibrium index, because it does not fulfill the condition 0 ≤ P &lt; N.</p><p>Write a function:</p><blockquote><p class="lang-cs" style="font-family: monospace; font-size: 9pt; display: block; white-space: pre-wrap"><tt>class Solution { public int solution(int[] A); }</tt></p></blockquote><p>that, given a zero-indexed array A consisting of N integers, returns any of its equilibrium indices. The function should return −1 if no equilibrium index exists.</p><p>For example, given array A shown above, the function may return 1, 3 or 7, as explained above.</p><p>Assume that:</p><blockquote><ul style="margin: 10px;padding: 0px;"><li>N is an integer within the range [<span class="number">0</span>..<span class="number">100,000</span>];</li><li>each element of array A is an integer within the range [<span class="number">−2,147,483,648</span>..<span class="number">2,147,483,647</span>].</li></ul></blockquote><p>Complexity:</p><blockquote><ul style="margin: 10px;padding: 0px;"><li>expected worst-case time complexity is O(N);</li><li>expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).</li></ul></blockquote><p>Elements of input arrays can be modified.</p></div>';


    $scope.result = '<div class="verify">  <div class="section has-error">      <div class="error compile-error">Compiler output:</div>      <div class="indent code">Compilation failed: 1 error(s), 0 warnings<br>Solution.cs(9,16): error CS0161: `Solution.solution(int[])\': not all code paths return a value<br></div>  </div>  <br>   <div class="title summary error">      Detected some errors.    </div></div>';

    vm.answer = 'using System; \r\n\r\n// you can also use other imports, for example: \r\n// using System.Collections.Generic; \r\n\r\n// you can write to stdout for debugging purposes, e.g.\r\n// Console.WriteLine("this is a debug message");\r\n\r\nclass Solution {  \r\n   public int solution(int[] A) {      \r\n    // write your code in C# 6.0 with .NET 4.5 (Mono)  \r\b   }\r\n};';

    $scope.finished = function () {
        // Finish callback
    };
}]);
